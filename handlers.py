from aiogram import Router
from aiogram.types import Message, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command
import aiohttp
from states import Profilestates, Foodstates
from aiogram.fsm.context import FSMContext
from utils import calculate_water, calculate_calories
import data
from config import WEATHER_TOKEN, headers

router = Router()



@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –≤–∞—à –±–æ—Ç.\n–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@router.message(Command("help"))
async def cmd_help(message: Message):
    await message.reply(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
        "/set_profile - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/calculate - –†–∞—Å—á–µ—Ç –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π\n"
        "/log_water - –ó–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã –≤—ã–ø–∏–ª–∏ –≤–æ–¥—ã\n"
        "/log_food - –ó–∞–ø–∏—à–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ –≤—ã —Å—ä–µ–ª–∏\n"
        "/log_workout - –ó–∞–ø–∏—à–∏—Ç–µ –≤–∞—à—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É\n"
        "/check_progress - –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ –¥–µ–Ω—å\n"
    )


@router.message(Command('set_profile'))
async def start_profile(message: Message, state: FSMContext):
    await message.reply('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–≤ –∫–≥):')
    await state.set_state(Profilestates.weight)

@router.message(Profilestates.weight)
async def process_weight(message:Message, state: FSMContext):
    await state.update_data(weight=int(message.text))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–º):")
    await state.set_state(Profilestates.height)

@router.message(Profilestates.height)
async def process_height(message: Message, state: FSMContext):
    await state.update_data(height=int(message.text))
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Profilestates.age)

@router.message(Profilestates.age)
async def process_age(message: Message, state: FSMContext):
    await state.update_data(age=int(message.text))
    await message.reply("–°–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —É –≤–∞—Å –≤ –¥–µ–Ω—å?")
    await state.set_state(Profilestates.activity)

@router.message(Profilestates.activity)
async def process_activity(message: Message, state: FSMContext):
    await state.update_data(activity=int(message.text))

    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(
        text="–°–∏–¥—è—á–∏–π",callback_data="btn1"),
        InlineKeyboardButton(text='–ú–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π', callback_data='btn2'),
        InlineKeyboardButton(text='–ü–æ–¥–≤–∏–∂–Ω—ã–π', callback_data='btn3')
    )
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏", reply_markup=builder.as_markup())
    await state.set_state(Profilestates.MET)

@router.callback_query()
async def callback_handler(callback_query: CallbackQuery, state: FSMContext):
    if callback_query.data == 'btn1':
        await state.update_data(MET=3)
        await callback_query.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∏–¥—è—á–∏–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏.')
    if callback_query.data == 'btn2':
        await state.update_data(MET=5)
        await callback_query.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–∞–ª–æ–ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏')
    if callback_query.data == 'btn3':
        await state.update_data(MET=8)
        await callback_query.message.answer('–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–¥–≤–∏–∂–Ω—ã–π –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏')
    await callback_query.answer()
    await callback_query.message.answer("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?")
    await state.set_state(Profilestates.city)

@router.message(Profilestates.city)
async def process_city(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /calculate –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –Ω–æ—Ä–º—ã –≤–æ–¥—ã –∏ –∫–∞–ª–æ—Ä–∏–π")

    user_data = await state.get_data()
    data.users[message.from_user.id] = user_data
    await state.clear()

@router.message(Command('calculate'))
async def calculate(message: Message):
    id_user = message.from_user.id
    user_data = data.users.get(id_user, {})
    async with aiohttp.ClientSession() as session:
        async with session.get(f"http://api.openweathermap.org/data/2.5/weather?q={user_data['city']}&appid={WEATHER_TOKEN}&units=metric") as res:
            res = await res.json()
            temperature = res['main']['temp']
    water = calculate_water(user_data['weight'], user_data['activity'], temperature)
    calorie_goal = calculate_calories(user_data['weight'], user_data['height'], user_data['age'],
                                          user_data['activity'], user_data['MET'])

    user_data['water_goal'] = water
    user_data['calorie_goal'] = calorie_goal

    data.users[message.from_user.id] = user_data

    await message.answer(f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –í–∞—à–∞ –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water} –º–ª, –í–∞—à–∞ –Ω–æ—Ä–º–∞ –∫–∞–ª–æ—Ä–∏–π: {calorie_goal} –∫–∫–∞–ª.")

@router.message(Command('log_water'))
async def log_water(message: Message):
    id_user = message.from_user.id
    count = int(message.text.split()[1])
    user_data = data.users.get(id_user, {})
    user_data['logged_water'] = user_data.get('logged_water', 0) + count
    await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {count} –º–ª –≤–æ–¥—ã. –í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {user_data['logged_water']} –º–ª.")

@router.message(Command('log_food'))
async def log_food(message: Message, state: FSMContext):
    food_name = message.text.split()[1]
    body = {
        "query": food_name,
        "timezone": "US/Eastern"
    }
    async with aiohttp.ClientSession() as session:
        async with session.post(f"https://trackapi.nutritionix.com/v2/natural/nutrients", json=body, headers=headers) as response:
            data = await response.json()
            products = data.get('foods', [])
            if products:
                first_products = products[0]
                kcal = first_products.get('nf_calories', {})
                grams = first_products.get('serving_weight_grams', {})
                kcal_per_100 = kcal/grams * 100
                await message.answer(f"{food_name} - {kcal_per_100:.1f} –∫–∫–∞–ª –Ω–∞ 100 –≥. –°–∫–æ–ª—å–∫–æ –≥—Ä–∞–º–º –≤—ã —Å—ä–µ–ª–∏?")
                await state.update_data(food_name=food_name, kcal_per_100=kcal_per_100)
                await state.set_state(Foodstates.amount)
            else:
                await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –í–∞—à –ø—Ä–æ–¥—É–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ")

@router.message(Foodstates.amount)
async def set_food_amount(message: Message, state: FSMContext):
    id_user = message.from_user.id
    grams = int(message.text)
    user_data = await state.get_data()
    kcal_per_100 = user_data.get('kcal_per_100', 0)
    total_kcal = kcal_per_100 * grams / 100
    users = data.users.get(id_user, {})
    users['total_kcal'] = users.get('total_kcal', 0) + total_kcal
    await message.answer(f"–ó–∞–ø–∏—Å–∞–Ω–æ: {total_kcal:.1f} –∫–∫–∞–ª.")
    await state.update_data(total_kcal=total_kcal)

    await state.clear()

@router.message(Command('log_workout'))
async def log_workout(message: Message, state: FSMContext):
    id_user = message.from_user.id
    workout = message.text.split()
    if len(workout) != 3:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –í–≤–µ–¥–∏—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ /log_workout <—Ç–∏–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏> <–≤—Ä–µ–º—è (–º–∏–Ω)>')
        return
    workout_type, workout_time = workout[1], int(workout[2])

    user_data = await state.get_data()
    weight = data.users[id_user]['weight']

    calories_burn = (workout_time) * (5 * 3.5 * weight) / 200
    water = (workout_time // 30) * 500
    users = data.users.get(id_user, {})
    users['calories_burn'] = users.get('calories_burn', 0) + calories_burn
    await state.update_data(burned_calories=user_data.get("burned_calories", 0) + calories_burn)
    await message.answer(f"{workout_type} {workout_time} –º–∏–Ω—É—Ç ‚Äî {calories_burn} –∫–∫–∞–ª. –í—ã–ø–µ–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ {water} –º–ª –≤–æ–¥—ã.")

@router.message(Command('check_progress'))
async def check_progress(message: Message):
    id_user = message.from_user.id
    user_data = data.users.get(id_user, {})

    progress = (
        f"üìä–ü—Ä–æ–≥—Ä–µ—Å—Å:\n"
        f"–í–æ–¥–∞:\n"
        f"- –í—ã–ø–∏—Ç–æ: {user_data.get('logged_water', 0)} –º–ª –∏–∑ {user_data.get('water_goal', 0)} –º–ª.\n"
        f"- –û—Å—Ç–∞–ª–æ—Å—å: {user_data.get('water_goal', 0) - user_data.get('logged_water', 0)} –º–ª.\n\n"
        f"–ö–∞–ª–æ—Ä–∏–∏:\n"
        f"- –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–æ: {user_data.get('total_kcal', 0)} –∫–∫–∞–ª –∏–∑ {user_data.get('calorie_goal', 0)} –∫–∫–∞–ª.\n"
        f"- –°–æ–∂–∂–µ–Ω–æ: {user_data.get('calories_burn', 0)} –∫–∫–∞–ª.\n"
        f"- –ë–∞–ª–∞–Ω—Å: {user_data.get('total_kcal', 0) - user_data.get('calories_burn', 0)} –∫–∫–∞–ª."
    )
    await message.answer(progress)


